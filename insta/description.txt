Некоторые базовые предположения:
1. Пользователь относительно редко открывает отдельный пост, чаще смотрит превью и пролистывает мимо.
2. Если много комментариев, пользователь вряд ли будет читать все. То же самое с лайками.

Поэтому давайте:
1. Хранить вместе с постом несколько комментов и лайков (а также примерное общее количество комментов и лайков), чтобы выдавать сразу их на превью.
2. Использовать пагинацию.

Пусть будут следующие БД:
1. Основная реляционная, в которую будет происходить запись. Чтение из неё тоже будет происходить, если пользователь всё-таки решил почитать комменты / полистать список лайкнувших.
2. Оптимизированная под чтение (mongodb?), предназначенная для быстрой выдачи превью поста. В неё из первой базы раз в T времени заливаются обновления (новые посты / комментарии, инкремент статистики etc).
3. Картинки давайте хранить в третьем месте, чтобы пользователь сам отдельно за ними ходил. Это какое-нибудь сильно реплицированное object storage может быть, чтобы выдавать много тяжелых картинок.

# Команды

1. Опубликовать пост

createPost: {
	text: string,
	image: blob (BSON)
}

2. Прокомментировать пост

createComment: {
	postId: int,
	text: string
}

3. Лайкнуть пост

likePost: {
	postId: int
}

# Запросы

1. Получить часть ленты

getPosts: {
	page: int,
	offset: int
}

posts: [
	{
		userId: int,
		text: string,
		imageUrl: string
		topComments: [
			{
				userId: int,
				text: string,
				date: timestamp
			}
		],
		topLikes: [
			{
				userId: int
			}
		]
	}
]

2. Получить часть лайков к посту

getLikes: {
	postId: int,
	page: int,
	offset: int
}

likes: [
	{
		userId: int
	}
]

3. Получить часть комментариев к посту

getComments: {
	postId: int,
	page: int,
	offset: int
}

comments: [
	{
		userId: int,
		text: string,
		date: timestamp
	}
]
